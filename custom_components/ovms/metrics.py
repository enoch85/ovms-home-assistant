"""Metrics definitions for OVMS integration."""

from homeassistant.components.sensor import (
    SensorDeviceClass,
    SensorStateClass,
)
from homeassistant.components.binary_sensor import (
    BinarySensorDeviceClass,
)
from homeassistant.const import (
    PERCENTAGE,
    UnitOfElectricCurrent,
    UnitOfElectricPotential,
    UnitOfEnergy,
    UnitOfLength,
    UnitOfPower,
    UnitOfPressure,
    UnitOfSpeed,
    UnitOfTemperature,
    UnitOfTime,
)
from homeassistant.helpers.entity import EntityCategory

# Categories of metrics
CATEGORY_BATTERY = "battery"
CATEGORY_CHARGING = "charging"
CATEGORY_CLIMATE = "climate"
CATEGORY_DOOR = "door"
CATEGORY_LOCATION = "location"
CATEGORY_MOTOR = "motor"
CATEGORY_TRIP = "trip"
CATEGORY_DEVICE = "device"
CATEGORY_DIAGNOSTIC = "diagnostic"
CATEGORY_POWER = "power"
CATEGORY_NETWORK = "network"
CATEGORY_SYSTEM = "system"
CATEGORY_TIRE = "tire"
CATEGORY_VW_EUP = "vw_eup"

# Custom unit constants
UNIT_AMPERE_HOUR = "Ah"

# A comprehensive mapping of metric paths to friendly names and attributes
METRIC_DEFINITIONS = {
    # System metrics
    "m.freeram": {
        "name": "Free RAM",
        "description": "Total amount of free RAM in bytes",
        "icon": "mdi:memory",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.hardware": {
        "name": "Hardware Info",
        "description": "Base module hardware info",
        "icon": "mdi:information",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.monotonic": {
        "name": "Uptime",
        "description": "Uptime in seconds",
        "icon": "mdi:timer-outline",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.SECONDS,
        "category": CATEGORY_SYSTEM,
    },
    "m.net.mdm.iccid": {
        "name": "SIM ICCID",
        "description": "SIM ICCID",
        "icon": "mdi:sim",
        "category": CATEGORY_NETWORK,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.net.mdm.model": {
        "name": "Modem Model",
        "description": "Modem module hardware info",
        "icon": "mdi:cellphone",
        "category": CATEGORY_NETWORK,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.net.mdm.network": {
        "name": "GSM Network Provider",
        "description": "Current GSM network provider",
        "icon": "mdi:network",
        "category": CATEGORY_NETWORK,
    },
    "m.net.mdm.sq": {
        "name": "GSM Signal Quality",
        "description": "GSM signal quality",
        "icon": "mdi:signal",
        "device_class": SensorDeviceClass.SIGNAL_STRENGTH,
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_NETWORK,
    },
    "m.net.provider": {
        "name": "Network Provider",
        "description": "Current primary network provider",
        "icon": "mdi:wifi",
        "category": CATEGORY_NETWORK,
    },
    "m.net.sq": {
        "name": "Network Signal Quality",
        "description": "Network signal quality",
        "icon": "mdi:signal",
        "device_class": SensorDeviceClass.SIGNAL_STRENGTH,
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_NETWORK,
    },
    "m.net.type": {
        "name": "Network Type",
        "description": "Current network type (none/modem/wifi)",
        "icon": "mdi:network",
        "category": CATEGORY_NETWORK,
    },
    "m.net.wifi.network": {
        "name": "WiFi Network SSID",
        "description": "Current Wifi network SSID",
        "icon": "mdi:wifi",
        "category": CATEGORY_NETWORK,
    },
    "m.net.wifi.sq": {
        "name": "WiFi Signal Quality",
        "description": "WiFi signal quality",
        "icon": "mdi:wifi",
        "device_class": SensorDeviceClass.SIGNAL_STRENGTH,
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_NETWORK,
    },
    "m.obdc2ecu.on": {
        "name": "OBD2ECU Process",
        "description": "Is the OBD2ECU process currently on",
        "icon": "mdi:car-connected",
        "category": CATEGORY_SYSTEM,
        "device_class": BinarySensorDeviceClass.POWER,
    },
    "m.serial": {
        "name": "Serial Number",
        "description": "Module serial number",
        "icon": "mdi:identifier",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.tasks": {
        "name": "Task Count",
        "description": "Task count (use module tasks to list)",
        "icon": "mdi:console",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.time.utc": {
        "name": "UTC Time",
        "description": "Current UTC time",
        "icon": "mdi:clock",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_SYSTEM,
    },
    "m.version": {
        "name": "Firmware Version",
        "description": "Firmware version",
        "icon": "mdi:package-up",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.egpio.input": {
        "name": "GPIO Input Ports",
        "description": "EGPIO input port state (ports 0â€¦9, present=high)",
        "icon": "mdi:gpio",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.egpio.monitor": {
        "name": "GPIO Monitoring Ports",
        "description": "EGPIO input monitoring ports",
        "icon": "mdi:gpio",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.egpio.output": {
        "name": "GPIO Output Ports",
        "description": "EGPIO output port state",
        "icon": "mdi:gpio",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.net.mdm.mode": {
        "name": "Modem Mode",
        "description": "Current modem mode (e.g., WCDMA, Online)",
        "icon": "mdi:cellphone-wireless",
        "category": CATEGORY_NETWORK,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.net.mdm.netreg": {
        "name": "Modem Network Registration",
        "description": "Modem network registration status",
        "icon": "mdi:cellphone-check",
        "category": CATEGORY_NETWORK,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "s.v2.connected": {
        "name": "V2 Server Connected",
        "description": "V2 (MP) server connected",
        "icon": "mdi:server-network",
        "category": CATEGORY_SYSTEM,
        "device_class": BinarySensorDeviceClass.CONNECTIVITY,
    },
    "s.v2.peers": {
        "name": "V2 Clients Connected",
        "description": "Number of V2 clients connected",
        "icon": "mdi:account-multiple",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "s.v3.connected": {
        "name": "V3 Server Connected",
        "description": "V3 (MQTT) server connected",
        "icon": "mdi:server-network",
        "category": CATEGORY_SYSTEM,
        "device_class": BinarySensorDeviceClass.CONNECTIVITY,
    },
    "s.v3.peers": {
        "name": "V3 Clients Connected",
        "description": "Number of V3 clients connected",
        "icon": "mdi:account-multiple",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "m.version": {
        "name": "Firmware Version",
        "description": "Firmware version",
        "icon": "mdi:package-up",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    # 12V Battery metrics
    "v.b.12v.current": {
        "name": "12V Battery Current",
        "description": "Auxiliary 12V battery momentary current",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.12v.voltage": {
        "name": "12V Battery Voltage",
        "description": "Auxiliary 12V battery momentary voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.12v.voltage.alert": {
        "name": "12V Battery Voltage Alert",
        "description": "Auxiliary battery under voltage alert",
        "icon": "mdi:alert",
        "category": CATEGORY_BATTERY,
        "device_class": BinarySensorDeviceClass.PROBLEM,
    },
    "v.b.12v.voltage.ref": {
        "name": "12V Battery Reference Voltage",
        "description": "Auxiliary 12V battery reference voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    # Main battery cell metrics
    "v.b.c.temp": {
        "name": "Cell Temperatures",
        "description": "Cell temperatures",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.temp.alert": {
        "name": "Cell Temperature Alerts",
        "description": "Cell temperature deviation alert level",
        "icon": "mdi:alert",
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.temp.dev.max": {
        "name": "Max Cell Temperature Deviation",
        "description": "Cell maximum temperature deviation observed",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.temp.max": {
        "name": "Maximum Cell Temperatures",
        "description": "Cell maximum temperatures",
        "icon": "mdi:thermometer-high",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.temp.min": {
        "name": "Minimum Cell Temperatures",
        "description": "Cell minimum temperatures",
        "icon": "mdi:thermometer-low",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.voltage": {
        "name": "Cell Voltages",
        "description": "Cell voltages",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.voltage.alert": {
        "name": "Cell Voltage Alerts",
        "description": "Cell voltage deviation alert level",
        "icon": "mdi:alert",
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.voltage.dev.max": {
        "name": "Max Cell Voltage Deviation",
        "description": "Cell maximum voltage deviation observed",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.voltage.max": {
        "name": "Maximum Cell Voltages",
        "description": "Cell maximum voltages",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    "v.b.c.voltage.min": {
        "name": "Minimum Cell Voltages",
        "description": "Cell minimum voltages",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
        "has_cell_data": True,
    },
    # Main battery metrics
    "v.b.cac": {
        "name": "Battery Capacity",
        "description": "Calculated battery pack capacity",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.capacity": {
        "name": "Battery Usable Capacity",
        "description": "Main battery usable capacity",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.consumption": {
        "name": "Battery Consumption",
        "description": "Main battery momentary consumption",
        "icon": "mdi:battery-minus",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfEnergy.WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.coulomb.recd": {
        "name": "Battery Coulomb Recovered Trip",
        "description": "Main battery coulomb recovered on trip/charge",
        "icon": "mdi:battery-plus",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.coulomb.recd.total": {
        "name": "Battery Coulomb Recovered Total",
        "description": "Main battery coulomb recovered total (life time)",
        "icon": "mdi:battery-plus",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.coulomb.used": {
        "name": "Battery Coulomb Used Trip",
        "description": "Main battery coulomb used on trip",
        "icon": "mdi:battery-minus",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.coulomb.used.total": {
        "name": "Battery Coulomb Used Total",
        "description": "Main battery coulomb used total (life time)",
        "icon": "mdi:battery-minus",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.current": {
        "name": "Battery Current",
        "description": "Main battery momentary current (output=positive)",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.energy.recd": {
        "name": "Battery Energy Recovered Trip",
        "description": "Main battery energy recovered on trip/charge",
        "icon": "mdi:battery-plus",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.energy.recd.total": {
        "name": "Battery Energy Recovered Total",
        "description": "Main battery energy recovered total (life time)",
        "icon": "mdi:battery-plus",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.energy.used": {
        "name": "Battery Energy Used Trip",
        "description": "Main battery energy used on trip",
        "icon": "mdi:battery-minus",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.energy.used.total": {
        "name": "Battery Energy Used Total",
        "description": "Main battery energy used total (life time)",
        "icon": "mdi:battery-minus",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.health": {
        "name": "Battery Health Description",
        "description": "General textual description of battery health",
        "icon": "mdi:battery-heart",
        "category": CATEGORY_BATTERY,
    },
    # Battery pack level metrics
    "v.b.p.level.avg": {
        "name": "Cell Level Average",
        "description": "Cell level - pack average",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.level.max": {
        "name": "Cell Level Maximum",
        "description": "Cell level - strongest cell in pack",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.level.min": {
        "name": "Cell Level Minimum",
        "description": "Cell level - weakest cell in pack",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.level.stddev": {
        "name": "Cell Level Deviation",
        "description": "Cell level - pack standard deviation",
        "icon": "mdi:chart-bell-curve",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.temp.avg": {
        "name": "Cell Temperature Average",
        "description": "Cell temperature - pack average",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.temp.max": {
        "name": "Cell Temperature Maximum",
        "description": "Cell temperature - warmest cell in pack",
        "icon": "mdi:thermometer-high",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.temp.min": {
        "name": "Cell Temperature Minimum",
        "description": "Cell temperature - coldest cell in pack",
        "icon": "mdi:thermometer-low",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.temp.stddev": {
        "name": "Cell Temperature Deviation",
        "description": "Cell temperature - current standard deviation",
        "icon": "mdi:chart-bell-curve",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.temp.stddev.max": {
        "name": "Max Cell Temperature Deviation",
        "description": "Cell temperature - maximum standard deviation observed",
        "icon": "mdi:chart-bell-curve",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.voltage.avg": {
        "name": "Cell Voltage Average",
        "description": "Cell voltage - pack average",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.voltage.grad": {
        "name": "Cell Voltage Gradient",
        "description": "Cell voltage - gradient of current series",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.voltage.max": {
        "name": "Cell Voltage Maximum",
        "description": "Cell voltage - strongest cell in pack",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.voltage.min": {
        "name": "Cell Voltage Minimum",
        "description": "Cell voltage - weakest cell in pack",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.voltage.stddev": {
        "name": "Cell Voltage Deviation",
        "description": "Cell voltage - current standard deviation",
        "icon": "mdi:chart-bell-curve",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.p.voltage.stddev.max": {
        "name": "Max Cell Voltage Deviation",
        "description": "Cell voltage - maximum standard deviation observed",
        "icon": "mdi:chart-bell-curve",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.power": {
        "name": "Battery Power",
        "description": "Main battery momentary power (output=positive)",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_BATTERY,
    },
    "v.b.range.est": {
        "name": "Estimated Range",
        "description": "Estimated range",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.range.full": {
        "name": "Full Charge Range",
        "description": "Ideal range at 100% SOC & current conditions",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.range.ideal": {
        "name": "Ideal Range",
        "description": "Ideal range",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.range.speed": {
        "name": "Range Change Speed",
        "description": "Momentary ideal range gain/loss (charge/discharge) speed",
        "icon": "mdi:speedometer",
        "device_class": SensorDeviceClass.SPEED,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfSpeed.KILOMETERS_PER_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "v.b.soc": {
        "name": "Battery Level",
        "description": "State of charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.soh": {
        "name": "Battery Health",
        "description": "State of health",
        "icon": "mdi:battery-heart",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "v.b.temp": {
        "name": "Battery Temperature",
        "description": "Main battery momentary temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_BATTERY,
    },
    "v.b.voltage": {
        "name": "Battery Voltage",
        "description": "Main battery momentary voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    # DC/DC converter metrics
    "v.c.12v.current": {
        "name": "DC-DC Converter Current",
        "description": "Output current of DC/DC-converter",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_POWER,
    },
    "v.c.12v.power": {
        "name": "DC-DC Converter Power",
        "description": "Output power of DC/DC-converter",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.WATT,
        "category": CATEGORY_POWER,
    },
    "v.c.12v.temp": {
        "name": "DC-DC Converter Temperature",
        "description": "Temperature of DC/DC-converter",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_POWER,
    },
    "v.c.12v.voltage": {
        "name": "DC-DC Converter Voltage",
        "description": "Output voltage of DC/DC-converter",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_POWER,
    },
    # Charging metrics
    "v.c.charging": {
        "name": "Charging Status",
        "description": "yes = currently charging",
        "icon": "mdi:battery-charging",
        "device_class": BinarySensorDeviceClass.BATTERY_CHARGING,
        "category": CATEGORY_CHARGING,
    },
    "v.c.climit": {
        "name": "Charge Current Limit",
        "description": "Maximum charger output current",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_CHARGING,
    },
    "v.c.current": {
        "name": "Charge Current",
        "description": "Momentary charger output current",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_CHARGING,
    },
    "v.c.duration.full": {
        "name": "Time to Full Charge",
        "description": "Estimated time remaining for full charge",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.MINUTES,
        "category": CATEGORY_CHARGING,
    },
    "v.c.duration.range": {
        "name": "Time to Range Limit",
        "description": "Estimated time remaining for sufficient range",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.MINUTES,
        "category": CATEGORY_CHARGING,
    },
    "v.c.duration.soc": {
        "name": "Time to SOC Limit",
        "description": "Estimated time remaining for sufficient SOC",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.MINUTES,
        "category": CATEGORY_CHARGING,
    },
    "v.c.efficiency": {
        "name": "Charging Efficiency",
        "description": "Momentary charger efficiency",
        "icon": "mdi:battery-charging",
        "device_class": SensorDeviceClass.POWER_FACTOR,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_CHARGING,
    },
    "v.c.kwh": {
        "name": "Charge Energy",
        "description": "Energy sum for running charge",
        "icon": "mdi:battery-charging",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_CHARGING,
    },
    "v.c.kwh.grid": {
        "name": "Grid Energy Used",
        "description": "Energy drawn from grid during running session",
        "icon": "mdi:transmission-tower",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_CHARGING,
    },
    "v.c.kwh.grid.total": {
        "name": "Total Grid Energy Used",
        "description": "Energy drawn from grid total (life time)",
        "icon": "mdi:transmission-tower",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_CHARGING,
    },
    "v.c.limit.range": {
        "name": "Charge Range Limit",
        "description": "Sufficient range limit for current charge",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_CHARGING,
    },
    "v.c.limit.soc": {
        "name": "Charge SOC Limit",
        "description": "Sufficient SOC limit for current charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_CHARGING,
    },
    "v.c.mode": {
        "name": "Charge Mode",
        "description": "standard, range, performance, storage",
        "icon": "mdi:battery-charging",
        "category": CATEGORY_CHARGING,
    },
    "v.c.pilot": {
        "name": "Pilot Signal",
        "description": "Pilot signal present",
        "icon": "mdi:car-connected",
        "category": CATEGORY_CHARGING,
        "device_class": BinarySensorDeviceClass.CONNECTIVITY,
    },
    "v.c.power": {
        "name": "Charge Power",
        "description": "Momentary charger input power",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_CHARGING,
    },
    "v.c.state": {
        "name": "Charge State",
        "description": "charging, topoff, done, prepare, timerwait, heating, stopped",
        "icon": "mdi:battery-charging",
        "category": CATEGORY_CHARGING,
    },
    "v.c.substate": {
        "name": "Charge Substate",
        "description": "scheduledstop, scheduledstart, onrequest, timerwait, powerwait, stopped, interrupted",
        "icon": "mdi:battery-charging",
        "category": CATEGORY_CHARGING,
    },
    "v.c.temp": {
        "name": "Charger Temperature",
        "description": "Charger temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_CHARGING,
    },
    "v.c.time": {
        "name": "Charging Duration",
        "description": "Duration of running charge",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.SECONDS,
        "category": CATEGORY_CHARGING,
    },
    "v.c.timermode": {
        "name": "Charge Timer Mode",
        "description": "yes = timer enabled",
        "icon": "mdi:timer",
        "category": CATEGORY_CHARGING,
        "device_class": BinarySensorDeviceClass.RUNNING,
    },
    "v.c.timerstart": {
        "name": "Charge Timer Start",
        "description": "Time timer is due to start, seconds since midnight UTC",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_CHARGING,
    },
    "v.c.timestamp": {
        "name": "Last Charge End Time",
        "description": "Date & time of last charge end",
        "icon": "mdi:timer-off",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_CHARGING,
    },
    "v.c.type": {
        "name": "Charge Type",
        "description": "Type of charger connection",
        "icon": "mdi:ev-plug-type2",
        "category": CATEGORY_CHARGING,
    },
    "v.c.voltage": {
        "name": "Charge Voltage",
        "description": "Momentary charger supply voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_CHARGING,
    },
    # Door states
    "v.d.cp": {
        "name": "Charge Port",
        "description": "Charge port open state",
        "icon": "mdi:ev-station",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "v.d.fl": {
        "name": "Front Left Door",
        "description": "Front left door open state",
        "icon": "mdi:car-door",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "v.d.fr": {
        "name": "Front Right Door",
        "description": "Front right door open state",
        "icon": "mdi:car-door",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "v.d.hood": {
        "name": "Hood",
        "description": "Hood/frunk open state",
        "icon": "mdi:car-lifted-pickup",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "v.d.rl": {
        "name": "Rear Left Door",
        "description": "Rear left door open state",
        "icon": "mdi:car-door",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "v.d.rr": {
        "name": "Rear Right Door",
        "description": "Rear right door open state",
        "icon": "mdi:car-door",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "v.d.trunk": {
        "name": "Trunk",
        "description": "Trunk open state",
        "icon": "mdi:car-back",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    # Environment and status metrics
    "v.e.alarm": {
        "name": "Alarm",
        "description": "Alarm sounding state",
        "icon": "mdi:bell-ring",
        "device_class": BinarySensorDeviceClass.PROBLEM,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.aux12v": {
        "name": "12V System",
        "description": "12V auxiliary system state (base system awake)",
        "icon": "mdi:power-plug",
        "device_class": BinarySensorDeviceClass.POWER,
        "category": CATEGORY_POWER,
    },
    "v.e.awake": {
        "name": "Vehicle Awake",
        "description": "Vehicle is fully awake (switched on by the user)",
        "icon": "mdi:power",
        "device_class": BinarySensorDeviceClass.POWER,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.c.config": {
        "name": "ECU Configuration Mode",
        "description": "ECU/controller in configuration state",
        "icon": "mdi:wrench",
        "category": CATEGORY_DIAGNOSTIC,
        "device_class": BinarySensorDeviceClass.UPDATE,
    },
    "v.e.c.login": {
        "name": "ECU Login Status",
        "description": "Module logged in at ECU/controller",
        "icon": "mdi:login",
        "category": CATEGORY_DIAGNOSTIC,
        "device_class": BinarySensorDeviceClass.CONNECTIVITY,
    },
    "v.e.cabintemp": {
        "name": "Cabin Temperature",
        "description": "Cabin temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.cabinfan": {
        "name": "Cabin Fan",
        "description": "Cabin fan speed",
        "icon": "mdi:fan",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.cabinsetpoint": {
        "name": "Cabin Temperature Setpoint",
        "description": "Cabin set point",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.cabinintake": {
        "name": "Cabin Air Intake",
        "description": "Cabin intake type (fresh, recirc, etc)",
        "icon": "mdi:air-filter",
        "category": CATEGORY_CLIMATE,
    },
    "v.e.cabinvent": {
        "name": "Cabin Air Vents",
        "description": "Cabin vent type (comma-separated list of feet, face, screen, etc)",
        "icon": "mdi:air-conditioner",
        "category": CATEGORY_CLIMATE,
    },
    "v.e.charging12v": {
        "name": "12V Battery Charging",
        "description": "12V battery charging state",
        "icon": "mdi:battery-charging",
        "device_class": BinarySensorDeviceClass.BATTERY_CHARGING,
        "category": CATEGORY_POWER,
    },
    "v.e.cooling": {
        "name": "Cooling Active",
        "description": "Cooling system active state",
        "icon": "mdi:snowflake",
        "device_class": BinarySensorDeviceClass.COLD,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.drivemode": {
        "name": "Drive Mode",
        "description": "Active drive profile code (vehicle specific)",
        "icon": "mdi:car-shift-pattern",
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.drivetime": {
        "name": "Drive Time",
        "description": "Seconds driving (turned on)",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.SECONDS,
        "category": CATEGORY_TRIP,
    },
    "v.e.footbrake": {
        "name": "Brake Pedal",
        "description": "Brake pedal state [%]",
        "icon": "mdi:car-brake-alert",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.gear": {
        "name": "Gear",
        "description": "Gear/direction; negative=reverse, 0=neutral",
        "icon": "mdi:car-shift-pattern",
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.handbrake": {
        "name": "Handbrake",
        "description": "Handbrake engaged state",
        "icon": "mdi:car-brake-parking",
        "device_class": BinarySensorDeviceClass.PROBLEM,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.headlights": {
        "name": "Headlights",
        "description": "Headlights on state",
        "icon": "mdi:car-light-high",
        "device_class": BinarySensorDeviceClass.LIGHT,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.heating": {
        "name": "Heating Active",
        "description": "Heating system active state",
        "icon": "mdi:fire",
        "device_class": BinarySensorDeviceClass.HEAT,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.hvac": {
        "name": "HVAC Active",
        "description": "HVAC active state",
        "icon": "mdi:air-conditioner",
        "device_class": BinarySensorDeviceClass.RUNNING,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.locked": {
        "name": "Vehicle Locked",
        "description": "Vehicle locked state",
        "icon": "mdi:lock",
        "device_class": BinarySensorDeviceClass.LOCK,
        "category": CATEGORY_DOOR,
    },
    "v.e.on": {
        "name": "Vehicle On",
        "description": "Vehicle is in ignition state (drivable)",
        "icon": "mdi:power",
        "device_class": BinarySensorDeviceClass.POWER,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.parktime": {
        "name": "Park Time",
        "description": "Seconds parking (turned off)",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.SECONDS,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.regenbrake": {
        "name": "Regenerative Braking",
        "description": "Regenerative braking active state",
        "icon": "mdi:battery-charging",
        "device_class": BinarySensorDeviceClass.RUNNING,
        "category": CATEGORY_BATTERY,
    },
    "v.e.serv.range": {
        "name": "Service Distance",
        "description": "Distance to next scheduled maintenance/service",
        "icon": "mdi:wrench-clock",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.serv.time": {
        "name": "Service Date",
        "description": "Time of next scheduled maintenance/service",
        "icon": "mdi:wrench-clock",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.temp": {
        "name": "Ambient Temperature",
        "description": "Ambient temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_CLIMATE,
    },
    "v.e.throttle": {
        "name": "Accelerator Pedal",
        "description": "Drive pedal state [%]",
        "icon": "mdi:gas-station",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "v.e.valet": {
        "name": "Valet Mode",
        "description": "Valet mode engaged state",
        "icon": "mdi:account-key",
        "device_class": BinarySensorDeviceClass.RUNNING,
        "category": CATEGORY_DIAGNOSTIC,
    },
    # Generator metrics
    "v.g.generating": {
        "name": "Generating",
        "description": "Currently delivering power state",
        "icon": "mdi:flash",
        "device_class": BinarySensorDeviceClass.POWER,
        "category": CATEGORY_POWER,
    },
    "v.g.climit": {
        "name": "Generator Current Limit",
        "description": "Maximum generator input current (from battery)",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_POWER,
    },
    "v.g.current": {
        "name": "Generator Current",
        "description": "Momentary generator input current (from battery)",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_POWER,
    },
    "v.g.duration.empty": {
        "name": "Time to Empty",
        "description": "Estimated time remaining for full discharge",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.MINUTES,
        "category": CATEGORY_POWER,
    },
    "v.g.duration.range": {
        "name": "Time to Range Limit",
        "description": "Estimated time for range limit",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.MINUTES,
        "category": CATEGORY_POWER,
    },
    "v.g.duration.soc": {
        "name": "Time to SOC Limit",
        "description": "Estimated time for SOC limit",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.MINUTES,
        "category": CATEGORY_POWER,
    },
    "v.g.efficiency": {
        "name": "Generator Efficiency",
        "description": "Momentary generator efficiency",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER_FACTOR,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_POWER,
    },
    "v.g.kwh": {
        "name": "Generated Energy",
        "description": "Energy sum generated in the running session",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_POWER,
    },
    "v.g.kwh.grid": {
        "name": "Grid Energy Sent",
        "description": "Energy sent to grid during running session",
        "icon": "mdi:transmission-tower",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_POWER,
    },
    "v.g.kwh.grid.total": {
        "name": "Total Grid Energy Sent",
        "description": "Energy sent to grid total",
        "icon": "mdi:transmission-tower",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_POWER,
    },
    "v.g.limit.range": {
        "name": "Generator Range Limit",
        "description": "Minimum range limit for generator mode",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_POWER,
    },
    "v.g.limit.soc": {
        "name": "Generator SOC Limit",
        "description": "Minimum SOC limit for generator mode",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_POWER,
    },
    "v.g.mode": {
        "name": "Generator Mode",
        "description": "Generator mode",
        "icon": "mdi:flash",
        "category": CATEGORY_POWER,
    },
    "v.g.pilot": {
        "name": "Generator Pilot Signal",
        "description": "Generator pilot signal present",
        "icon": "mdi:connection",
        "device_class": BinarySensorDeviceClass.CONNECTIVITY,
        "category": CATEGORY_POWER,
    },
    "v.g.power": {
        "name": "Generator Power",
        "description": "Momentary generator output power",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_POWER,
    },
    "v.g.state": {
        "name": "Generator State",
        "description": "Generator state",
        "icon": "mdi:flash",
        "category": CATEGORY_POWER,
    },
    "v.g.substate": {
        "name": "Generator Substate",
        "description": "Generator substate",
        "icon": "mdi:flash",
        "category": CATEGORY_POWER,
    },
    "v.g.temp": {
        "name": "Generator Temperature",
        "description": "Generator temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_POWER,
    },
    "v.g.time": {
        "name": "Generator Run Time",
        "description": "Duration of generator running",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.SECONDS,
        "category": CATEGORY_POWER,
    },
    "v.g.timermode": {
        "name": "Generator Timer Mode",
        "description": "Generator timer enabled state",
        "icon": "mdi:timer",
        "device_class": BinarySensorDeviceClass.RUNNING,
        "category": CATEGORY_POWER,
    },
    "v.g.timerstart": {
        "name": "Generator Timer Start",
        "description": "Time generator is due to start",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_POWER,
    },
    "v.g.timestamp": {
        "name": "Last Generation End Time",
        "description": "Date & time of last generation end",
        "icon": "mdi:timer-off",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_POWER,
    },
    "v.g.type": {
        "name": "Generator Connection Type",
        "description": "Connection type (chademo, ccs, â€¦)",
        "icon": "mdi:ev-plug-type2",
        "category": CATEGORY_POWER,
    },
    "v.g.voltage": {
        "name": "Generator Voltage",
        "description": "Momentary generator output voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_POWER,
    },
    # Inverter and motor metrics
    "v.i.temp": {
        "name": "Inverter Temperature",
        "description": "Inverter temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_MOTOR,
    },
    "v.i.power": {
        "name": "Inverter Power",
        "description": "Momentary inverter motor power (output=positive)",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_MOTOR,
    },
    "v.i.efficiency": {
        "name": "Inverter Efficiency",
        "description": "Momentary inverter efficiency",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER_FACTOR,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_MOTOR,
    },
    "v.m.rpm": {
        "name": "Motor RPM",
        "description": "Motor speed (RPM)",
        "icon": "mdi:rotate-right",
        "category": CATEGORY_MOTOR,
    },
    "v.m.temp": {
        "name": "Motor Temperature",
        "description": "Motor temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_MOTOR,
    },
    # Position and trip metrics
    "v.p.acceleration": {
        "name": "Acceleration",
        "description": "Vehicle acceleration",
        "icon": "mdi:speedometer",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": "m/sÂ²",
        "category": CATEGORY_TRIP,
    },
    "v.p.altitude": {
        "name": "Altitude",
        "description": "GPS altitude",
        "icon": "mdi:elevation-rise",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.METERS,
        "category": CATEGORY_LOCATION,
    },
    "v.p.direction": {
        "name": "Direction",
        "description": "GPS direction",
        "icon": "mdi:compass",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": "Â°",
        "category": CATEGORY_LOCATION,
    },
    "v.p.gpshdop": {
        "name": "GPS HDOP",
        "description": "GPS horizontal dilution of precision (smaller=better)",
        "icon": "mdi:crosshairs-gps",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_LOCATION,
    },
    "v.p.gpslock": {
        "name": "GPS Lock",
        "description": "GPS satellite lock",
        "icon": "mdi:crosshairs-gps",
        "device_class": BinarySensorDeviceClass.CONNECTIVITY,
        "category": CATEGORY_LOCATION,
    },
    "v.p.gpsmode": {
        "name": "GPS Mode",
        "description": "<GPS><GLONASS>; N/A/D/E (None/Autonomous/Differential/Estimated)",
        "icon": "mdi:crosshairs-gps",
        "category": CATEGORY_LOCATION,
    },
    "v.p.gpssq": {
        "name": "GPS Signal Quality",
        "description": "GPS signal quality [%]",
        "icon": "mdi:signal",
        "device_class": SensorDeviceClass.SIGNAL_STRENGTH,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_LOCATION,
    },
    "v.p.gpsspeed": {
        "name": "GPS Speed",
        "description": "GPS speed over ground",
        "icon": "mdi:speedometer",
        "device_class": SensorDeviceClass.SPEED,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfSpeed.KILOMETERS_PER_HOUR,
        "category": CATEGORY_LOCATION,
    },
    "v.p.gpstime": {
        "name": "GPS Time",
        "description": "Time of GPS coordinates",
        "icon": "mdi:clock",
        "device_class": SensorDeviceClass.TIMESTAMP,
        "category": CATEGORY_LOCATION,
    },
    "v.p.latitude": {
        "name": "Latitude",
        "description": "GPS latitude",
        "icon": "mdi:map-marker",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_LOCATION,
    },
    "v.p.location": {
        "name": "Location Name",
        "description": "Name of current location if defined",
        "icon": "mdi:map-marker",
        "category": CATEGORY_LOCATION,
    },
    "v.p.longitude": {
        "name": "Longitude",
        "description": "GPS longitude",
        "icon": "mdi:map-marker",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_LOCATION,
    },
    "v.p.odometer": {
        "name": "Odometer",
        "description": "Vehicle odometer",
        "icon": "mdi:counter",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_TRIP,
    },
    "v.p.satcount": {
        "name": "GPS Satellites",
        "description": "GPS satellite count in view",
        "icon": "mdi:satellite-variant",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_LOCATION,
    },
    "v.p.speed": {
        "name": "Vehicle Speed",
        "description": "Vehicle speed",
        "icon": "mdi:speedometer",
        "device_class": SensorDeviceClass.SPEED,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfSpeed.KILOMETERS_PER_HOUR,
        "category": CATEGORY_TRIP,
    },
    "v.p.trip": {
        "name": "Trip Odometer",
        "description": "Trip odometer",
        "icon": "mdi:counter",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_TRIP,
    },
    "v.p.valet.distance": {
        "name": "Valet Mode Distance",
        "description": "Distance traveled in valet mode",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_TRIP,
    },
    "v.p.valet.latitude": {
        "name": "Valet Mode Last Latitude",
        "description": "Last known latitude position in valet mode",
        "icon": "mdi:map-marker",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_LOCATION,
    },
    "v.p.valet.longitude": {
        "name": "Valet Mode Last Longitude",
        "description": "Last known longitude position in valet mode",
        "icon": "mdi:map-marker",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_LOCATION,
    },
    # Tire metrics
    "v.t.alert": {
        "name": "Tire Alerts",
        "description": "TPMS tire alert levels [0=normal, 1=warning, 2=alert]",
        "icon": "mdi:car-tire-alert",
        "category": CATEGORY_TIRE,
    },
    "v.t.health": {
        "name": "Tire Health",
        "description": "TPMS tire health states",
        "icon": "mdi:car-tire-alert",
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_TIRE,
    },
    "v.t.pressure": {
        "name": "Tire Pressure",
        "description": "TPMS tire pressures",
        "icon": "mdi:gauge",
        "device_class": SensorDeviceClass.PRESSURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPressure.KPA,
        "category": CATEGORY_TIRE,
    },
    "v.t.temp": {
        "name": "Tire Temperature",
        "description": "TPMS tire temperatures",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_TIRE,
    },
    # Vehicle identification metrics
    "v.type": {
        "name": "Vehicle Type",
        "description": "Vehicle type code",
        "icon": "mdi:car",
        "category": CATEGORY_DEVICE,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "v.vin": {
        "name": "Vehicle Identification Number",
        "description": "Vehicle identification number",
        "icon": "mdi:identifier",
        "category": CATEGORY_DEVICE,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    # VW e-UP specific metrics
    "xvu.b.cap.ah.abs": {
        "name": "VW eUP! Absolute Battery Capacity",
        "description": "Absolute battery capacity in Ampere hours",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.cap.ah.norm": {
        "name": "VW eUP! Normalized Battery Capacity",
        "description": "Normalized battery capacity in Ampere hours",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UNIT_AMPERE_HOUR,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.cap.kwh.abs": {
        "name": "VW eUP! Absolute Battery Energy",
        "description": "Absolute battery capacity in kWh",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.cap.kwh.norm": {
        "name": "VW eUP! Normalized Battery Energy",
        "description": "Normalized battery capacity in kWh",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.cap.kwh.range": {
        "name": "VW eUP! Range Battery Energy",
        "description": "Battery capacity available for range in kWh",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY_STORAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.cell.delta": {
        "name": "VW eUP! Cell Voltage Delta",
        "description": "Maximum voltage difference between cells",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.energy.range": {
        "name": "VW eUP! Energy Available for Range",
        "description": "Energy available for driving range",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.soc.abs": {
        "name": "VW eUP! Absolute SOC",
        "description": "Absolute state of charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.soh.charge": {
        "name": "VW eUP! SOH Charge",
        "description": "State of health based on charge capacity",
        "icon": "mdi:battery-heart",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.soh.range": {
        "name": "VW eUP! SOH Range",
        "description": "State of health based on range capacity",
        "icon": "mdi:battery-heart",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.b.soh.vw": {
        "name": "VW eUP! SOH VW",
        "description": "State of health reported by VW",
        "icon": "mdi:battery-heart",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ac.i1": {
        "name": "VW eUP! AC Charging Current L1",
        "description": "AC charging current phase 1",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ac.i2": {
        "name": "VW eUP! AC Charging Current L2",
        "description": "AC charging current phase 2",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ac.p": {
        "name": "VW eUP! AC Charging Power",
        "description": "AC charging power",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ac.u1": {
        "name": "VW eUP! AC Charging Voltage L1",
        "description": "AC charging voltage phase 1",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ac.u2": {
        "name": "VW eUP! AC Charging Voltage L2",
        "description": "AC charging voltage phase 2",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ccs.i": {
        "name": "VW eUP! DC Charging Current",
        "description": "CCS DC charging current",
        "icon": "mdi:current-dc",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ccs.p": {
        "name": "VW eUP! DC Charging Power",
        "description": "CCS DC charging power",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.ccs.u": {
        "name": "VW eUP! DC Charging Voltage",
        "description": "CCS DC charging voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.dc.i1": {
        "name": "VW eUP! DC-DC Input Current",
        "description": "DC-DC converter input current",
        "icon": "mdi:current-dc",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.dc.i2": {
        "name": "VW eUP! DC-DC Output Current",
        "description": "DC-DC converter output current",
        "icon": "mdi:current-dc",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.dc.p": {
        "name": "VW eUP! DC-DC Power",
        "description": "DC-DC converter power",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.dc.u1": {
        "name": "VW eUP! DC-DC Input Voltage",
        "description": "DC-DC converter input voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.dc.u2": {
        "name": "VW eUP! DC-DC Output Voltage",
        "description": "DC-DC converter output voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.eff.calc": {
        "name": "VW eUP! Charging Efficiency Calculated",
        "description": "Calculated charging efficiency",
        "icon": "mdi:battery-charging",
        "device_class": SensorDeviceClass.POWER_FACTOR,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.eff.ecu": {
        "name": "VW eUP! Charging Efficiency ECU",
        "description": "ECU reported charging efficiency",
        "icon": "mdi:battery-charging",
        "device_class": SensorDeviceClass.POWER_FACTOR,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.limit.soc.max": {
        "name": "VW eUP! Max SOC Limit",
        "description": "Maximum SOC limit for charging",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.limit.soc.min": {
        "name": "VW eUP! Min SOC Limit",
        "description": "Minimum SOC limit for charging",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.loss.calc": {
        "name": "VW eUP! Calculated Charging Loss",
        "description": "Calculated power loss during charging",
        "icon": "mdi:flash-off",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.loss.ecu": {
        "name": "VW eUP! ECU Charging Loss",
        "description": "ECU reported power loss during charging",
        "icon": "mdi:flash-off",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.KILO_WATT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.soc.norm": {
        "name": "VW eUP! Normalized SOC",
        "description": "Normalized state of charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.c.timermode.def": {
        "name": "VW eUP! Default Timer Mode",
        "description": "Default timer mode enabled state",
        "icon": "mdi:timer",
        "device_class": BinarySensorDeviceClass.RUNNING,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.e.hv.chgmode": {
        "name": "VW eUP! HV Charging Mode",
        "description": "High voltage charging mode",
        "icon": "mdi:battery-charging",
        "category": CATEGORY_VW_EUP,
    },
    "xvu.e.lv.autochg": {
        "name": "VW eUP! 12V Auto Charging",
        "description": "12V automatic charging enabled",
        "icon": "mdi:battery-charging",
        "device_class": BinarySensorDeviceClass.BATTERY_CHARGING,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.e.lv.pwrstate": {
        "name": "VW eUP! LV Power State",
        "description": "Low voltage power state",
        "icon": "mdi:power-settings",
        "category": CATEGORY_VW_EUP,
    },
    "xvu.e.serv.days": {
        "name": "VW eUP! Service Days",
        "description": "Days until next service",
        "icon": "mdi:wrench-clock",
        "device_class": SensorDeviceClass.DURATION,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTime.DAYS,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.m.soc.abs": {
        "name": "VW eUP! Motor Controller Absolute SOC",
        "description": "Motor controller absolute state of charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.m.soc.norm": {
        "name": "VW eUP! Motor Controller Normalized SOC",
        "description": "Motor controller normalized state of charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.m.version": {
        "name": "VW eUP! Module Version",
        "description": "eUP module software version",
        "icon": "mdi:tag-text",
        "category": CATEGORY_VW_EUP,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "xvu.v.t.diff": {
        "name": "VW eUP! Tire Pressure Difference",
        "description": "Difference in tire pressure values",
        "icon": "mdi:gauge-gap",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_VW_EUP,
    },
    "xvu.v.t.emgcy": {
        "name": "VW eUP! Tire Emergency Values",
        "description": "Emergency tire pressure values",
        "icon": "mdi:car-tire-alert",
        "state_class": SensorStateClass.MEASUREMENT,
        "category": CATEGORY_VW_EUP,
    },
}

# Simplified mapping for lookup by keyword/pattern
TOPIC_PATTERNS = {
    "soc": {
        "name": "Battery State of Charge",
        "icon": "mdi:battery",
        "device_class": SensorDeviceClass.BATTERY,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": PERCENTAGE,
        "category": CATEGORY_BATTERY,
    },
    "range": {
        "name": "Range",
        "icon": "mdi:map-marker-distance",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_BATTERY,
    },
    "temp": {
        "name": "Temperature",
        "icon": "mdi:thermometer",
        "device_class": SensorDeviceClass.TEMPERATURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfTemperature.CELSIUS,
        "category": CATEGORY_CLIMATE,
    },
    "voltage": {
        "name": "Voltage",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.VOLTAGE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricPotential.VOLT,
        "category": CATEGORY_BATTERY,
    },
    "current": {
        "name": "Current",
        "icon": "mdi:current-ac",
        "device_class": SensorDeviceClass.CURRENT,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfElectricCurrent.AMPERE,
        "category": CATEGORY_BATTERY,
    },
    "power": {
        "name": "Power",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.POWER,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPower.WATT,
        "category": CATEGORY_POWER,
    },
    "energy": {
        "name": "Energy",
        "icon": "mdi:flash",
        "device_class": SensorDeviceClass.ENERGY,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfEnergy.KILO_WATT_HOUR,
        "category": CATEGORY_BATTERY,
    },
    "speed": {
        "name": "Speed",
        "icon": "mdi:speedometer",
        "device_class": SensorDeviceClass.SPEED,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfSpeed.KILOMETERS_PER_HOUR,
        "category": CATEGORY_TRIP,
    },
    "odometer": {
        "name": "Odometer",
        "icon": "mdi:counter",
        "device_class": SensorDeviceClass.DISTANCE,
        "state_class": SensorStateClass.TOTAL_INCREASING,
        "unit": UnitOfLength.KILOMETERS,
        "category": CATEGORY_TRIP,
    },
    "pressure": {
        "name": "Pressure",
        "icon": "mdi:gauge",
        "device_class": SensorDeviceClass.PRESSURE,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": UnitOfPressure.KPA,
        "category": CATEGORY_TIRE,
    },
    "signal": {
        "name": "Signal Strength",
        "icon": "mdi:signal",
        "device_class": SensorDeviceClass.SIGNAL_STRENGTH,
        "state_class": SensorStateClass.MEASUREMENT,
        "unit": "dBm",
        "category": CATEGORY_NETWORK,
    },
    "door": {
        "name": "Door",
        "icon": "mdi:car-door",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "lock": {
        "name": "Lock",
        "icon": "mdi:lock",
        "device_class": BinarySensorDeviceClass.LOCK,
        "category": CATEGORY_DOOR,
    },
    "charging": {
        "name": "Charging",
        "icon": "mdi:battery-charging",
        "device_class": BinarySensorDeviceClass.BATTERY_CHARGING,
        "category": CATEGORY_CHARGING,
    },
    "climate": {
        "name": "Climate Control",
        "icon": "mdi:air-conditioner",
        "category": CATEGORY_CLIMATE,
    },
    "fan": {
        "name": "Fan",
        "icon": "mdi:fan",
        "category": CATEGORY_CLIMATE,
    },
    "trunk": {
        "name": "Trunk",
        "icon": "mdi:car-back",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "hood": {
        "name": "Hood",
        "icon": "mdi:car-lifted-pickup",
        "device_class": BinarySensorDeviceClass.DOOR,
        "category": CATEGORY_DOOR,
    },
    "timer": {
        "name": "Timer",
        "icon": "mdi:timer",
        "device_class": SensorDeviceClass.DURATION,
        "category": CATEGORY_SYSTEM,
    },
    "version": {
        "name": "Version",
        "icon": "mdi:package-up",
        "category": CATEGORY_SYSTEM,
        "entity_category": EntityCategory.DIAGNOSTIC,
    },
    "status": {
        "name": "Status",
        "icon": "mdi:information-outline",
        "category": CATEGORY_SYSTEM,
    },
    "alert": {
        "name": "Alert",
        "icon": "mdi:alert",
        "device_class": BinarySensorDeviceClass.PROBLEM,
        "category": CATEGORY_DIAGNOSTIC,
    },
    "xvu": {
        "name": "VW eUP!",
        "icon": "mdi:car-electric",
        "category": CATEGORY_VW_EUP,
    },
}

# Group metrics by categories
METRIC_CATEGORIES = {
    CATEGORY_BATTERY: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_BATTERY
    ],
    CATEGORY_CHARGING: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_CHARGING
    ],
    CATEGORY_CLIMATE: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_CLIMATE
    ],
    CATEGORY_DOOR: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_DOOR
    ],
    CATEGORY_LOCATION: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_LOCATION
    ],
    CATEGORY_MOTOR: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_MOTOR
    ],
    CATEGORY_TRIP: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_TRIP
    ],
    CATEGORY_DEVICE: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_DEVICE
    ],
    CATEGORY_DIAGNOSTIC: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_DIAGNOSTIC
    ],
    CATEGORY_POWER: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_POWER
    ],
    CATEGORY_NETWORK: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_NETWORK
    ],
    CATEGORY_SYSTEM: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_SYSTEM
    ],
    CATEGORY_TIRE: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_TIRE
    ],
    CATEGORY_VW_EUP: [
        k
        for k, v in METRIC_DEFINITIONS.items()
        if v.get("category") == CATEGORY_VW_EUP
    ],
}
# Binary metrics that should be boolean
BINARY_METRICS = [
    k
    for k, v in METRIC_DEFINITIONS.items()
    if v.get("device_class")
    in [
        BinarySensorDeviceClass.DOOR,
        BinarySensorDeviceClass.LOCK,
        BinarySensorDeviceClass.BATTERY_CHARGING,
        BinarySensorDeviceClass.CONNECTIVITY,
        BinarySensorDeviceClass.POWER,
        BinarySensorDeviceClass.PROBLEM,
        BinarySensorDeviceClass.RUNNING,
    ]
    or k.endswith((".on", ".charging", ".alarm", ".alert", ".locked", ".hvac"))
]

# Prefix patterns to detect entity categories
PREFIX_CATEGORIES = {
    "v.b": CATEGORY_BATTERY,
    "v.c": CATEGORY_CHARGING,
    "v.d": CATEGORY_DOOR,
    "v.e.cabin": CATEGORY_CLIMATE,
    "v.e": CATEGORY_DIAGNOSTIC,
    "v.g": CATEGORY_POWER,
    "v.i": CATEGORY_MOTOR,
    "v.m": CATEGORY_MOTOR,
    "v.p": CATEGORY_LOCATION,
    "v.t": CATEGORY_TIRE,
    "m.net": CATEGORY_NETWORK,
    "m": CATEGORY_SYSTEM,
    "s": CATEGORY_SYSTEM,
    "xvu.b": CATEGORY_VW_EUP,
    "xvu.c": CATEGORY_VW_EUP,
    "xvu.e": CATEGORY_VW_EUP,
    "xvu.m": CATEGORY_VW_EUP,
    "xvu.v": CATEGORY_VW_EUP,
}


def get_metric_by_path(metric_path):
    """Get metric definition by exact path match."""
    return METRIC_DEFINITIONS.get(metric_path)


def get_metric_by_pattern(topic_parts):
    """Try to match a metric by pattern in topic parts."""
    # First, try to find an exact match of the last path component
    if topic_parts:
        last_part = topic_parts[-1].lower()
        for pattern, info in TOPIC_PATTERNS.items():
            if pattern == last_part:
                return info

    # Then try partial matches in topic parts
    for pattern, info in TOPIC_PATTERNS.items():
        if any(pattern in part.lower() for part in topic_parts):
            return info

    return None


def determine_category_from_topic(topic_parts):
    """Determine the most likely category from topic parts."""
    # Check for known categories in topic
    for part in topic_parts:
        part_lower = part.lower()
        if part_lower in [
            CATEGORY_BATTERY,
            CATEGORY_CHARGING,
            CATEGORY_CLIMATE,
            CATEGORY_DOOR,
            CATEGORY_LOCATION,
            CATEGORY_MOTOR,
            CATEGORY_TRIP,
            CATEGORY_DIAGNOSTIC,
            CATEGORY_POWER,
            CATEGORY_NETWORK,
            CATEGORY_SYSTEM,
            CATEGORY_TIRE,
            CATEGORY_VW_EUP,
        ]:
            return part_lower

    # Try matching by prefix
    full_path = ".".join(topic_parts)
    for prefix, category in PREFIX_CATEGORIES.items():
        if full_path.startswith(prefix):
            return category

    # Default category
    return CATEGORY_SYSTEM


def create_friendly_name(topic_parts, metric_info=None):
    """Create a friendly name from topic parts using metric definitions when available."""
    if not topic_parts:
        return "Unknown"

    # If we have metric info, use its name
    if metric_info and "name" in metric_info:
        return metric_info["name"]

    # Otherwise, build a name from the last part of the topic
    last_part = topic_parts[-1].replace("_", " ").title()

    # If the topic has hierarchical information, include it
    if len(topic_parts) > 1:
        category = determine_category_from_topic(topic_parts)
        return f"{last_part} ({category.title()})"

    return last_part
